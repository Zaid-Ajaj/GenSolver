
#I __SOURCE_DIRECTORY__

#load "../../../.paket/load/netstandard2.1/main.group.fsx"

#load "../Utils.fs"
#load "../Variable.fs"
#load "../Equation.fs"
#load "../Solver.fs"
#load "../Api.fs"

#time

open Informedica.GenSolver.Lib
open Informedica.GenUtils.Lib.BCL
open Informedica.GenSolver.Utils
open MathNet.Numerics

module Api = Informedica.GenSolver.Lib.Api
module Solver = Informedica.GenSolver.Lib.Solver
module Name = Variable.Name
module ValueRange = Variable.ValueRange
module Props = Api.Props

let procss s = "> " + s + " </br> "|> String.replace "*" "\*" |> printfn "%s"

let printEqs = Api.printEqs true procss
let solve n  = 
    let n = n |> Name.createExc
    Api.solve id procss true None n
let init     = Api.init
let nonZeroNegative = Api.nonZeroNegative

let eqs = " = "
let tms = " * "
let add = " + "

// Test set min smaller than incr
["A"]
|> Api.init
|> solve "A" (1N |> Set.singleton |> Props.Increment )
|> solve "A" (Props.MaxIncl (1N / 10N))


// Test set max larget than max
["A"]
|> Api.init
|> solve "A" (Props.MaxIncl 1N)
|> solve "A" (Props.MaxIncl 10N)

// Test set min smaller than incr
["A"]
|> Api.init
|> solve "A" "incr" [1N]
|> solve "A" "vals" [1N / 10N]


// Test sum equation
["a" + eqs + "b" + add + "c"]
|> Api.init
|> Api.nonZeroNegative
|> solve "a" "vals" [5N]
|> solve "b" "incr" [1N]
|> solve "c" "vals" [2N]


// Test sum equation and product equation
[
    "c" + eqs + "d" + tms + "a"
//    "a" + eqs + "b" + add + "c"
    "a" + eqs + "f" + add + "g"
]
|> Api.init
|> Api.nonZeroNegative
|> solve "d" "vals" [1N; 2N]
|> solve "c" "vals" [10N]
|> solve "f" "vals" [5N]


// FAILING CASE
// setting a to 3/50
//a[3/50, 3/25, 6/25] = b[3/50, 3/25, 6/25] * c[1] 
//d[3/50, 3/25, 6/25] = e[3/50, 3/25, 6/25] * f[1] 
[
    "a" + eqs + "b" + tms + "c"
//    "a" + eqs + "b" + add + "c"
    "d" + eqs + "e" + tms + "f"
]
|> Api.init
|> Api.nonZeroNegative
|> solve "a" "vals" [(3N/50N); (3N/25N); (6N/25N)]
|> solve "b" "vals" [(3N/50N); (3N/25N); (6N/25N)]
|> solve "c" "vals" [1N]
|> solve "d" "vals" [(3N/50N); (3N/25N); (6N/25N)]
|> solve "e" "vals" [(3N/50N); (3N/25N); (6N/25N)]
|> solve "f" "vals" [1N]
|> solve "a" "vals" [(3N/50N)]



let vara =
    [
        "a" 
    ]
    |> Api.init
    |> solve "a" "vals" [1N..5N]
    |> function
    | [e1] ->
        e1 |> Equation.findName (Name.createExc "a") |> Seq.head
 

[] |> List.replaceOrAdd (Variable.eqName vara) vara
let varc =  
    [1N..2N]
    |> Set.ofList
    |> ValueRange.createValueSet 
    |> Variable.setValueRange vara
[vara] |> List.replaceOrAdd (Variable.eqName vara) varc

[ { vara with Name = "b" |> Name.createExc }]
|> List.replaceOrAdd (Variable.eqName vara) vara


let avals = [31N/500000000N; 31N/468750000N; 31N/250000000N; 31N/234375000N; 31N/187500000N; 93N/500000000N; 31N/156250000N]
let bvals =[31N/5000000000000N; 31N/4687500000000N; 31N/2500000000000N; 31N/2343750000000N; 31N/1875000000000N; 93N/5000000000000N; 31N/1562500000000N] 
let cvals = [10000N] 

let avar =
    avals
    |> Set.ofList
    |> ValueRange.createValueSet
    |> Variable.createSucc ("a" |> Name.createExc)

let bvar =
    bvals
    |> Set.ofList
    |> ValueRange.createValueSet
    |> Variable.createSucc ("b" |> Name.createExc)

let cvar =
    cvals
    |> Set.ofList
    |> ValueRange.createValueSet
    |> Variable.createSucc ("c" |> Name.createExc)

(avar, [bvar; cvar]) 
|> Equation.createProductEqExc
|> Equation.solve (printfn "%s")

1000N * (7N/3600000N)
|> BigRational.toFloat
|> printfn "%A"

1000N * (531N/61600000N)
|> BigRational.toFloat
|> printfn "%A"

printfn "%A - %A" (1000N * (9N/100000N) |> BigRational.toFloat)
                  (1000N * (1N/2250N) |> BigRational.toFloat)


let v1 = (1N/2880000N)
let v2 = (234108493437739881280383729318540857092731380023741981014154441209445375719597826088349773386197443980314424498742995009130527447455211371308568191444359502577235328623039651875373819777403738064135405797155683057177148520356207507984240077634583140197306646009090634754343053681612747238614080894969892184633230243850220610236481195249359366821225810548560523197604034505827046385428374974171273092715746195726282958871909431194322539510884899319582326841N/15086271780769447655506119622579801227473542760303047365428024016559274452608191504607228710275028586567766588042067249267660217005013259084782530314153664963269968826859024004385775137959708082845183081261377669505863194813568085087364192547604888818804125069739079765661078693299129364023882108562863213314591053470026571371785277005334975263794246843332074083199239790002304717093448793642932403895899002724759750074376980441684927155664092639900239863808000000N) 
let v3 = (21274266210901680172168201828434178032171485824685497170321824506718706420942061120538880812240190726613213214865210342456764424955351581989930264978917480005030391352720591185867119074973403325443792457364058035019971850448141291455106864574900407712908786285830312612440011285208032402030780111357366488790435320331703398855673517805579074887777428688334613796335744722508900791468557892253314748137561575717625116918409036944729831290968689114548711598879018777964420982657926242241977373616161782163757849249063398322870829364603831461421136865246153249106099975490403442147744860216871273873212019847647895664623723481555601944735671352714018875027418411753442821838700236854368905961620285431296033420154565895304787865993047882555832549315230085256518849660581837453285323899156321837076388917575501198278549345298017789118918612598519218038610382112744981542672534433867487226333873760051619045223004944522615650512080763933522121208743723757646729685260698263715162282314742050135686578732981725086263361358640054507585948938776919617591515826251816005581551765880574163210175236876844452407693288765945549539204640173315632873480325264673092936523001772737206076915902359765458777651873627756936252963326688250780825570501759021947272428592649532537784270432672327884915799871978035363297889980831995692852599744031365445900045521303620958774090289051698595314792885539247149825479764473812985517087279149050235266565356905910507260382417958945873416035133971469336410200584353692071900507004302738094268797339635561580713233676427918332885069658763781317966077409368717112863388247886913807977503499912324240205645136458373752780674207168086247618966000821643916489313711612115825396831668829428542682431800825734354020317681305287897913334615563947653934912159196146986623785657396833659080615109744088622963330680041257032697389592667523044591892782650326160359719529865594270714373633431384571637225053355750720862674665048750274575035109692867484461N/1370942836294224600356261397219256692126524006026032260723929130780147894948219685169065027422603619924485957230052037313778184966828367533445749268608410252005677541956645139896430997579179647112549999339141815728232611167291604275455203804338851072186840518040527549032224950946947418951406368773901348210297014157878963907851893365971077926643331827683342310302261847592383082717241367193897792530300713827145415580563286399837536313415241945131063619515493251668987743814021453698815610900567706654575633866793684348575617300270473290698211420775094504561201825407567822654215630080393736485250477971582082262846533067603544265851610798996334224601173057162437694638729201489369251353005188219813369002239346387221382191299353948940693064103133250417480918979771477295716011332428731777417506437704800337756960039389464911551292927436346864233480119764749755587272271380203807607943798537698444563499399495937235699954864996199496189498717814272785801933876318134904752113287415054890196743650870636362968961459151894525839782629531719906651793038141266369173406981192549916063289439064690977628299597882925231277726163591638236342878905654074029184898733504285477362364562010302511698035177383123364226189940614855250937820083974230107784637236693662572103430273366210070793910965317214332809494128894820429657617304493331631755341273396813629135638432803166733698079840562077059534995347078064912771264383404355216075278350455604141146653074712839870837815527002596106953665667760239708002846402497479964979989760227724205894241156338916071998038011435844956181563687219706190789139677255100717477775797442009597863170228275446898514934290901219810765680855008683130909179977254796812069633954755213552683882083113990177583321258604070733561390518391353583892791657975026316802919502753750518191267846342569525044185022567968451458198079383697590542136018784133930561500100089676961283209532368866232725765903850162886792248997191487529835243540400779777541734400000N) 
